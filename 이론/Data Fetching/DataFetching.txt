Next.js에서 데이터를 fetch하는 방법
- client와 server component로 부터 데이터를 fetch하는법
- streaming을 사용하는법
- suspense, loading fallback, error boundary 를 사용하는법

- client와 server component로 부터 데이터를 fetch하는법

A. React에서 평범하게 데이터를 패칭하는 방법
   (Next.js와 외부라이브러리를 사용하지 않을 때)
export default function Page() {
  const [movies, setMovies] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const getMovies = async () => {
    const res = await fetch(url);
    const json = await res.json();
    setMovies(json);
    setIsLoading(false);
  };
  useEffect(() => {
    getMovies();
  }, []);
  return (
    <div>
      <h1>hello</h1>
      {isLoading ? "Loading..." : JSON.stringify(movies)}
    </div>
  );
}

B. Next.js를 사용하여 데이터를 fetch

const URL = "https://nomad-movies.nomadcoders.workers.dev/movies";
const getMovies = async () => {
  const response = await fetch(URL);
  const json = response.json();
  return json;
};
export default async function HomePage() {
  // 컴포넌트 앞에 async를 작성
  const movies = await getMovies();
  return (
    <div>
      <h1>hello</h1>
      {JSON.stringify(movies)}
    </div>
  );
}

- server component를 사용하게 된다면 fetch된 url을 캐싱시켜 줄 것이다.
- 한번만 fetch하게되면 next.js가 기억하기때문에 이후에는 다시 fetch할 필요가 없다.
- 로딩상태는 존재하나 매우 빠르게 발생하기에 실질적인 체감으로 느껴지지않는다.
- 매우 빠르게 느껴지는 이유는 server component에서 next.js가 사용자가 fetch한 것을 
  기억하기 때문이다.
- 첫 번째 fetch만 api를 요청하고, 이후는 fetch한 내용을 기억하기때문에 다시 요청 X

.Streaming 
- 또한 페이지를 이동하였을 때, 특정 데이터를 가져오는 시간이 오래 걸리게되면,
 이는 백엔드에서 작업하는 경우 이기때문에 페이지가 보여지지않고,
 작업이 끝난 이후 페이지가 보여지게된다.
 페이지로 이동하였을 때 사용자에게 로딩중을 의미할 수 있는 화면을 보여주기위해
 loading.tsx 컴포넌트를 통해 페이지를 이동하더라도 ui를 먼저 보여줄 수 있음
 (로딩이 끝나게 되면 본래의 페이지를 확인할 수 있음)

 * server component에서 fetch하는 중에 loading 파일을 제공해주면, 해당 파일이 페이지에 나타나게 된다
 (브라우저는 아직 백엔드 작업을 완료하지 못했어, 기다려줘야해 라는 의미로
 Loading 컴포넌트를 페이지에 제공)